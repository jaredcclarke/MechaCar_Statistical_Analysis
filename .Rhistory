R --Version
install.packages(c("codetools", "foreign", "KernSmooth", "Matrix", "nlme"))
install.packages("tidyverse")
library(tidyverse)
x <- "hello world!"
months [2]
months[2]
months <- c("Jan", "Feb", "Mar", "Apr", 'May', "Jun", "Jul")
months[2]
n_months <- 1:length(months)
year <- 2021
# Welcome to R!
x <- "hello world!"
x[1]
typeof(x)
year <- 2021
months <- c("Jan", "Feb", "Mar", "Apr", 'May', "Jun", "Jul")
months[2]
n_months <- 1:length(months)
zillow_oc_2017 <- read_csv(file="00-Case_Study/Resources/zillow_orange_county_2017.csv")
zillow_oc_2017 <- read_csv(file="00-Case_Study/Resources/zillow_orange_county_2017.csv")
library(readr)
zillow_orange_county_2017 <- read_csv("Desktop/Data Analysis/cu-virt-data-pt-09-2020-u-b/03-Lesson-Plans/15-Lessons/1-Recommended/00-Case_Study/Resources/zillow_orange_county_2017.csv")
View(zillow_orange_county_2017)
zillow_oc_2017 <- read_csv(file="00-Case_Study/Resources/zillow_orange_county_2017.csv")
zillow_oc_2017 <- read_csv(file="~Desktop/Data Analysis/cu-virt-data-pt-09-2020-u-b/03-Lesson-Plans/15-Lessons/1-Recommended/00-Case_Study/Resources/zillow_orange_county_2017.csv")
zillow_oc_2017 <- read_csv(file="Desktop/Data Analysis/cu-virt-data-pt-09-2020-u-b/03-Lesson-Plans/15-Lessons/1-Recommended/00-Case_Study/Resources/zillow_orange_county_2017.csv")
zillow_oc_2017[c(2,4,6,8,10), c("garagetotalsqft", "lotsizesquarefeet")]
deframe(zillow_oc_2017(["finishedsquarefeet"]) > 2000
deframe(zillow_oc_2017("finishedsquarefeet") > 2000
deframe(zillow_oc_2017("finishedsquarefeet")) > 2000
View(zillow_orange_county_2017)
View(zillow_orange_county_2017)
View(zillow_orange_county_2017)
View(zillow_oc_2017)
install.packages("jsonlite")
install.packages("jsonlite")
setwd("~/Desktop/R_Analysis")
setwd("~/Desktop/R_Analysis/01_Demo")
x <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv
demo_table <-read.csv(file ='demo.csv', check.names =F, stringsAsFactors =F)
View(demo_table)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3, 'Year']
demo_table[3, 3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
View(demo_table2)
View(filter_table)
?subset()
View(demo_table2)
filter_table2 <- subset(demo_table2, price > 10000, & drive == '4wd' & "clean" %in% title_status) #filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == '4wd' & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
View(demo_table)
```
```
sample_rows <- sample(num_rows, 3)
?mutate()
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Milege_per_Year=Total_Miles/2020-Year), IsActive=TRUE #add columns to orginal data frame
demo_table <- demo_table %>% mutate(Milege_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to orginal data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), Maximum_Price=max(price), Num_Vehicles=n(), .groups = 'keep') # create summary table with multiple columns
View(summarize_demo)
demo_table <- demo_table %>% mutate(Milege_per_Year=Total_Miles/2020-Year), IsActive=TRUE #add columns to orginal data frame
?gather()
# reshape data
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",vakue="Score",buying_price:popularity)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(long_table)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
?spread()
> wide_table <- long_table %>% spread(key="Metric",value="Score")
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
View(long_table)
View(demo_table3)
View(long_table)
all.equal(demo_table3,wide_table)
?ggplot()
head(mpg)
View(demo_table3)
View(demo_table2)
View(demo_table)
View(filter_table2)
View(long_table)
View(wide_table)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
?geom_bar()
> mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
View(mpg_summary)
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # rotate the x-axis
mpg_summary <- subset(mpg, manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mena(hwy), .groups = 'keep') #create summary table
mpg_summary <- subset(mpg, manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) # add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size=qsec) #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="Vehicle Class") #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="Vehicle Class" * 2) #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size=4) #add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive", size="Vehicle Class") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(aes(color = drv)) + theme(axis.text.x=element_text(angle=45,hjust=1))
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=(Mean_Engine - SD_Engine), ymax= (Mean_Engine+SD_Engine))) #overlay with error bars
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), SD_Engine=sd(displ), .groups = 'keep')
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
View(mpg_summary)
plt <- ggplot(mpg_summary, aes(x=class, y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class", y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine - SD_Engine, ymax=Mean_Engine + SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
> head(mpg_long)
head(mpg_long)
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1))
?facet_wrap
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
> theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
View(mpg_summary)
View(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
plt + geom_boxplot() + facet_wrap(vars(trans)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(class)) + facet_wrap(vars(drv)) +
them(axis.text.x=element_text(angle=45, hjust=1), legend.position = "none") + xlab("Manufactuer")
+ theme(axis.text.x=element_text(angle=45, hjust=1), legend.position = "none") + xlab("Manufactuer")
plt <- ggplot(mpg_long, aes(x=manufacturer, y=Rating, color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(class)) + facet_wrap(vars(drv)) +
theme(axis.text.x=element_text(angle=45, hjust=1), legend.position = "none") + xlab("Manufactuer")
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
#Qualitative test for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test
shapiro.test(mtcars$wt)
?sample_n()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
View(population_table)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
?t.test()
.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
View(mpg_data)
View(mpg_1999)
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
View(mpg_2008)
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt$cyl <- factor(mtcars_filt$cyl) # convert numeric column to factor
mtcars_filt <- mtcars[,c("hp", "cyl")] #filter the columns from the mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) # convert numeric column to factor
View(mtcars_filt)
mtcars_filt$cyl <- factor(mtcars_filt$cyl) # convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
View(mtcars_filt)
>?cor()
?cor()
head(mtcars)
plt <- ggplot(mtcars, aes(x=hp, y=qsec)) #import dataset into ggplot2
plt + geom_point() # create scatter plot
cor(mtcars$hp, mtcars$qsec) # calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset)
head(used_cars)
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven, used_cars$Selling_Price)
used_matrix <- as.matrix(used_cars[,c("Selling_Price", "Present_Price", "Miles_Driven")])
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec ~ hp,mtcars))
model <- lm(qsec ~ hp,mtcars) # create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercepts)'] # determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/Desktop/Data Analysis/MechaCar_Statistical_Analysis")
library(dplyr)
library("dplyr")
detach("package:dplyr", unload = TRUE)
library(dbplyr)
detach("package:dbplyr", unload = TRUE)
library(dplyr)
library(dbplyr)
